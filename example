import unittest

def get_metric_key_value_dict(metric_keys, metric_values):
    metric_key_value_dict = dict(zip(metric_keys, metric_values))
    return metric_key_value_dict

class TestGetMetricKeyValueDict(unittest.TestCase):

    def test_get_metric_key_value_dict(self):
        # Test case 1: Valid inputs
        metric_keys = ["key1", "key2", "key3"]
        metric_values = ["value1", "value2", "value3"]
        expected_result = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}
        self.assertEqual(get_metric_key_value_dict(metric_keys, metric_values), expected_result)

        # Test case 2: Empty lists
        metric_keys = []
        metric_values = []
        expected_result = {}
        self.assertEqual(get_metric_key_value_dict(metric_keys, metric_values), expected_result)

        # Test case 3: Different number of keys and values
        metric_keys = ["key1", "key2", "key3"]
        metric_values = ["value1", "value2"]
        with self.assertRaises(ValueError):
            get_metric_key_value_dict(metric_keys, metric_values)

        # Test case 4: Numeric keys and values
        metric_keys = [1, 2, 3]
        metric_values = [10, 20, 30]
        expected_result = {1: 10, 2: 20, 3: 30}
        self.assertEqual(get_metric_key_value_dict(metric_keys, metric_values), expected_result)

if __name__ == '__main__':
    unittest.main()
